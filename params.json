{"name":"Blueflood","tagline":"Blueflood for OSGI ","body":"![Blueflood](http://i.imgur.com/fM087yS.gif)\r\n\r\n# Blueflood\r\n\r\n[Discuss](https://groups.google.com/forum/#!forum/blueflood-discuss) - [Code](http://github.com/rackerlabs/blueflood) - [Site](http://blueflood.io)\r\n\r\n## Introduction\r\n\r\nBlueflood is a multi-tenant distributed metric processing system created by engineers at \r\n[Rackspace](http://www.rackspace.com).\r\nIt is used in production by the [Cloud Monitoring](http://www.rackspace.com/cloud/monitoring/)\r\nteam to process metrics generated by their monitoring systems.\r\nBlueflood is capable of ingesting, rolling up and serving metrics at a massive scale.\r\n\r\n## Getting Started\r\n\r\nThe latest code will always be here on Github.\r\n\r\n    git clone git@github.com:rackerlabs/blueflood.git\r\n    cd blueflood\r\n    \r\nYou can run the entire suite of tests using Maven:\r\n\r\n    mvn test integration-test\r\n\r\n### Building\r\n\r\nBuild an ['uber jar'](http://stackoverflow.com/questions/11947037/what-is-an-uber-jar) using maven:\r\n\r\n    mvn package\r\n\r\nThe uber jar will be found in ${BLUEFLOOD_DIR}/blueflood-all/target/blueflood-all-${VERSION}-jar-with-dependencies.jar.\r\nThis jar contains all the dependencies necessary to run Blueflood with a very simple classpath.\r\n\r\n### Running\r\n\r\nThe best place to start is the [10 minute guide](https://github.com/rackerlabs/blueflood/wiki/10minuteguide).\r\nIn a nutshell, you must do this to run Blueflood as standalone application:\r\n\r\n    java -cp /path/to/uber.jar com.rackspacecloud.blueflood.service.BluefloodServiceStarter \\\r\n    -Dblueflood.config=file:///path/to/blueflood.conf \\\r\n    -Dlog4j.configuration=file:///path/to/log4j.properties\r\n\r\n    \r\nEach configuration option can be found in Configuration.java.  Each of those can be overridden on the command line by\r\ndoing:\r\n\r\n    -DCONFIG_OPTION=NEW_VALUE\r\n\r\n## Development\r\n\r\nWe anticipate different use cases for Blueflood.  For example, at Rackspace it made more sense to create a\r\n[Thrift](http://thrift.apache.org) layer for ingestion and query.  We have chosen not to release that layer because\r\nit contains a lot of code that is specific to our infrastructure and other backend systems.\r\n\r\nWe decided to release Blueflood with reference HTTP-based ingestion and query layers.  These layers may be replaced by\r\ncode that works better with your enterprise.\r\n\r\n### Custom Ingestion\r\n\r\nSeveral things must be done to properly ingest data:\r\n1. Full resolution data must be written via `AstyanaxWriter.insertFull()`.\r\n2. A `ScheduleContext` object must be `update()`d regarding that metrics shard and collection time.\r\n3. Shard state must be periodically pushed to the database for each shard that metrics have been collected for.  This\r\n   can be done by getting the dirty slot information from the `ShardStateManager` associated with a particular\r\n   `ScheduleContext` object.\r\n\r\n`HttpMetricsIngestionServer` is an example of how to set up a multi-threaded staged ingestion pipeline.\r\n\r\n### Custom Querying\r\n\r\nThankfully, querying is easier than ingestion.  Whatever query service you create should have a handler that extends\r\n`RollupHandler`, which provides a basic wrapping of low level read operations provided by `AstyanaxReader`.\r\n\r\n## Operations\r\n\r\nBlueflood exposes a great deal of internal performance metrics over\r\n[JMX](https://blogs.oracle.com/jmxetc/entry/what_is_jmx).\r\nBlueflood respects the standard JMX JVM settings:\r\n\r\n    com.sun.management.jmxremote.authenticate\r\n    com.sun.management.jmxremote.ssl\r\n    java.rmi.server.hostname\r\n    com.sun.management.jmxremote.port\r\n    \r\nYou can use any tool that supports JMX to get internal performance metrics out of Blueflood.\r\n\r\nAdditionally, internal performance metrics can be pushed directly to a [Graphite](http://graphite.wikidot.com/) \r\nservice by specifying the following in your Blueflood\r\nconfiguration:\r\n\r\n    GRAPHITE_HOST\r\n    GRAPHITE_PORT\r\n    GRAPHITE_PREFIX\r\n\r\n## Contributing\r\n\r\nFirst, we welcome bug reports and contributions.\r\nIf you would like to contribute code, just fork this project and send us a pull request.\r\nIf you would like to contribute documentation, you should get familiar with\r\n[our wiki](https://github.com/rackerlabs/blueflood/wiki)\r\n\r\nAlso, we have set up a [Google Group](https://groups.google.com/forum/#!forum/blueflood-discuss) to answer questions.\r\nIf you prefer IRC, most of the Blueflood developers are in #blueflood on Freenode.\r\n\r\n## License\r\n\r\nCopyright 2013 Rackspace\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.","google":"UA-42769648-1","note":"Don't delete this file! It's used internally to help with page regeneration."}